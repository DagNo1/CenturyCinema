/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package tg.trident.centurycinema.ticket_seller.reservation_panels;

import Model.CenturyModel;
import Model.Movie;
import Model.Screening;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
/**
 *
 * @author dagim
 */
public class SelectScreening extends javax.swing.JPanel {
    public ArrayList<Integer> currentList = new ArrayList<>();

    /**
     * Creates new form AddReservation
     */
    public SelectScreening() {
        initComponents();
        
        ArrayList<Screening> screenings = CenturyModel.getAllScreening();
        populateScreeningComboBox(screenings);
        
        //Setting the date combo box
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        // Clear the existing items in the JComboBox
        dateSelector.setModel(model);
        ArrayList<String> allDates = new ArrayList<>();
         for (Screening item : screenings) {
            if(!allDates.contains(item.getDate())){
                allDates.add(item.getDate());
                model.addElement(item.getDate());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        screeningComboBox = new javax.swing.JComboBox<>();
        filterDateButton = new tg.trident.centurycinema.buttons.GoldenButton();
        jLabel1 = new javax.swing.JLabel();
        clearFilter = new tg.trident.centurycinema.buttons.GoldenButton();
        dateSelector = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(37, 37, 37));

        screeningComboBox.setBackground(new java.awt.Color(58, 58, 58));
        screeningComboBox.setForeground(new java.awt.Color(120, 120, 120));
        screeningComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NO screenings for selected date and/or period." }));
        screeningComboBox.setBorder(null);
        screeningComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screeningComboBoxActionPerformed(evt);
            }
        });

        filterDateButton.setText("Filter by Date");
        filterDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterDateButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select Screening");

        clearFilter.setText("Clear Filters");
        clearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterActionPerformed(evt);
            }
        });

        dateSelector.setBackground(new java.awt.Color(58, 58, 58));
        dateSelector.setForeground(new java.awt.Color(120, 120, 120));
        dateSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Dates" }));
        dateSelector.setBorder(null);
        dateSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateSelectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(347, 347, 347))
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(screeningComboBox, 0, 501, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addGap(323, 323, 323)
                .addComponent(filterDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(207, 207, 207))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(dateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(screeningComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(108, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void screeningComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screeningComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_screeningComboBoxActionPerformed

    private void filterDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterDateButtonActionPerformed
        // TODO add your handling code here:
        String dateSelected = dateSelector.getSelectedItem().toString();
        populateScreeningComboBox(CenturyModel.getAllScreeningsOnDate(dateSelected));
    }//GEN-LAST:event_filterDateButtonActionPerformed

    private void clearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterActionPerformed
        populateScreeningComboBox(CenturyModel.getAllScreening());
    }//GEN-LAST:event_clearFilterActionPerformed

    private void dateSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateSelectorActionPerformed

    public void populateScreeningComboBox(ArrayList<Screening> allScreenings ){
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        // Clear the existing items in the JComboBox
        screeningComboBox.setModel(model);
        currentList.clear();
        // Add your own ArrayList items to the JComboBox
        for (Screening item : allScreenings) {
            Movie movie = CenturyModel.getMovieById(item.getMovie_id());
            model.addElement("Movie: " +  movie.getTitle() +  ",  Period: " + item.getPeriod() + ",  Date" + item.getDate());
            currentList.add(item.getId());
        }
    }

    public int getSelectedScreening(){
        return currentList.get(screeningComboBox.getSelectedIndex());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private tg.trident.centurycinema.buttons.GoldenButton clearFilter;
    private javax.swing.JComboBox<String> dateSelector;
    private tg.trident.centurycinema.buttons.GoldenButton filterDateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> screeningComboBox;
    // End of variables declaration//GEN-END:variables
}
